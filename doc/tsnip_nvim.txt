*tsnip-nvim.txt*

Plugin to expand snippets written in Pure TypeScript(Deno).

This plugin depends on denops.vim and, optionally does on nui.nvim.

- denops.vim
    https://github.com/vim-denops/denops.vim
- nui.nvim (optional: it is used for the rich input UI.)
    https://github.com/MunifTanjim/nui.nvim

To use it with completion, you need coc.nvim or ddc.vim

- coc.nvim
    https://github.com/neoclide/coc.nvim
- ddc.vim
    https://github.com/Shougo/ddc.vim 

Author:  yuki-yano
License: MIT

==============================================================================
USAGE                                           *tsnip-usage*

Completion

- coc.nvim:
    :CocInstall coc-tsnip

- ddc.vim:
    call ddc#custom#patch_global('sources', ['tsnip'])

Can be used with coc.nvim or ddc.vim. In the default, place the snippet file in
`~/.vim/tsnip/{filetype}.ts`.

The default export in the snippet file will function as the snippet.

==============================================================================
SNIPPET_FORMAT                                  *tsnip-snippt-format*

Pure TypeScript object.

>
    type Snippet = {
      name?: string;
      text?: string;
      params: Array<
        {
          name: string;
          type: "single_line";
        } | {
          name: string;
          type: "multi_line";
        }
      >;
      render: (inputs: {
        [key: string]: { text: string | undefined } | undefined;
      }) => string;
    }
<

==============================================================================
SNIPPET_PROPERTY                                 *tsnip-snippt-property*

name (optional):
    Name of the snippet to be displayed on the first line during completion.

text (optional):
    Content of the snippet displayed during completion.
    If not defined, the result of render will be used.

params:
    Definition of arguments to be passed to the render function.
    In the case of multi_line, input is repeated until
    an empty string is entered.

render:
    Function that takes the input params and renders
    the result of the snippet.


==============================================================================
RENDER_CONTEXT                                        *tsnip-render-context*

The type of Context passed as the second argument of the render function.

TypeDefinition:
>
   type Context = {
     fileName: { text: string };
     fileType: { text: string };
     cwd: { text: string };
     postCursor: string;
   };
<

Example:
>
   const fileNameSnippet: Snippet = {
     params: [],
     render: (_, { fileName }) => `${fileName}`
   }
<
postCursor is unique text, cursor will jump to there and start insert mode.

Example:
>
   const cursorSnippet: Snippet = {
     params: [],
     render: (_, { postCursor }) => `console.log(${postCursor})`
   }
<
above snippet will expand to `console.log(|)`. (cursor jump to `|`)

==============================================================================
EXAMPLE                                         *tsnip-example*

>
    import { Snippet } from "https://deno.land/x/tsnip_vim@v0.4/mod.ts";

    const state: Snippet = {
      name: "useState",
      text: "const [${1:state}, set${State}] = useState(${2:default_value})",
      params: [
        {
          name: "state",
          type: "single_line",
        },
        {
          name: "default_value",
          type: "single_line",
        },
      ],
      render: ({ state, default_value }) =>
        `const [${state?.text ?? ""}, set${
          state != null
            ? `${state.text?.charAt(0).toUpperCase()}${state.text?.slice(1)}`
            : ""
        }] = useState(${default_value?.text ?? ""})`,
    };

    export default {
      state,
    }
<
==============================================================================
OPTIONS                                           *tsnip-options*

*g:tsnip_snippet_dir*
  Is specified, read snippet files from this.
  Set string of path.

  Default value is '~/.vim/tsnip'

*g:tsnip_use_nui*
  If the option is set as true, then it always uses |nui.nvim|
  else uses |input()|.

  The default value is result given by
    `!!luaeval('pcall(require, "nui.input")')`

vim:tw=78:sw=2:ts=2:ft=help:norl:nowrap:
